{% extends 'partials/base.html.twig' %}

{% set themeConfig = config.themes["portfolio-theme"] %}

{# Initialize tag parameters #}
{% set tagParam = uri.params|split(':')[1] %}
{% set tags = tagParam|split('+') %}
{% set attributedTags = {} %}

{# detect magic "all" tag #}
{% set isAllTag = 'all' in tags %}

{% for tag in tags %}
	{% set attributedTags = attributedTags|merge({ (tag): {
	'found': false,
	'category': 'tag',
	'title': themeConfig.tagMapping[tag].title|default(tag|capitalize)
	}}) %}
{% endfor %}

{% set pageTitle = [] %}
{% for tag in tags %}
	{% set pageTitle = pageTitle|merge([ attributedTags[tag].title ]) %}
{% endfor %}
{% set pageTitle = pageTitle|join(" + ") %}

{# Set the main id #}
{% set mainId = "tag" %}

{% block assets %}
	{{ parent() }}
	{% do assets.addJs('theme://vendor/isotope-2.2.2/isotope.pkgd.min.js', {'group': 'bottom'}) %}
	{% do assets.addJs('theme://vendor/isotope-2.2.2/masonry-horizontal.js', {'group': 'bottom'}) %}
	{#{% do assets.addJs('theme://vendor/isotope-2.2.2/packery-mode.pkgd.min.js', {'group': 'bottom'}) %}#}
	{#{% do assets.addJs('theme://vendor/isotope-3.0.1/isotope.pkgd.min.js', {'group': 'bottom'}) %}#}
	{#{% do assets.addJs('theme://vendor/isotope-3.0.1/masonry-horizontal.js', {'group': 'bottom'}) %}#}

	{% do assets.addJs('theme://js/tag.js', {'group': 'bottom'}) %}
{% endblock %}

{% set taxMap = {} %}

{# Tags that are defined in the portfolio-theme.yaml #}
{% set knownTags = [] %}

{# Tags that are in the URL param, but are not in portfolio-theme.yaml #}
{% set unknownTags = [] %}
{% set hasUnknownTags = false %}

{# Search for the provided tags in all tag categories #}
{% for taxCategory,taxValues in taxonomy.taxonomy() %}
	{% for taxValue in taxValues|keys %}
		{% if attributedTags[taxValue] is not empty %}
			{% set attributedTags = attributedTags|merge(
			{(taxValue):
			attributedTags[taxValue]|merge({
			'found': true,
			'category': taxCategory,
			})}) %}
		{% endif %}
	{% endfor %}
{% endfor %}

{# Move the attributed tags in appropriate collections for simpler usage #}
{% for tag,attributes in attributedTags %}
	{% if attributes.found %}
		{% set knownTags = knownTags|merge([ tag ]) %}
	{% else %}
		{% set hasUnknownTags = true %}
		{% set unknownTags = unknownTags|merge([ tag ]) %}
	{% endif %}

	{% if taxMap[attributes.category] is empty %}
		{% set taxMap = taxMap|merge({(attributes.category): [tag] }) %}
	{% else %}
		{% set taxMap = taxMap|merge({(attributes.category): taxMap[(attributes.category)]|merge([tag]) }) %}
	{% endif %}
{% endfor %}

{% if isAllTag %}
	{% set projects = pages.collection( {items: {'@page.descendants': '/project'}, filter: {'type': 'project'} }) %}
{% elseif hasUnknownTags %}
	{% set projects = {} %}
{% else %}
	{% set projects = taxonomy.findTaxonomy(taxMap) %}
{% endif %}

{% set knownTags = knownTags|sort %}

{% block pageTitle %}
	<h2>{{ isAllTag ? 'All Projects' : pageTitle }}
		<small class="numberOfProjects">{{ projects|length }}</small>
	</h2>
{% endblock %}

{% block content %}
	{#{{ dump(attributedTags) }}#}

	<section class="description">
		{% set description = "" %}
		{% for module in page.collection %}
			{% for tag in knownTags %}
				{% if module.folder == ("_" ~ tag) %}
					{% set description = description ~ module.content ~ "\n" %}
				{% endif %}
			{% endfor %}
		{% endfor %}

		{% if description is not empty %}
			<article class="text">
				{{ description }}
			</article>
		{% endif %}
		<div class="infoBox">
			<h4>Modify Selection</h4>
			<dl>
				{% if knownTags|length > 1 %}
					<dt class="tags">Expand</dt>
					<dd class="tags">
						{% for tag in knownTags %}
							<a href="{{ page.url ~ "/:" ~ tag }}" class="tag">
								All {{ attributedTags[tag].title }} Projects
								<small class="numberOfProjects">{{ taxonomy.findTaxonomy({
										(attributedTags[tag].category): tag
									})|length }}</small>
							</a>
						{% endfor %}
					</dd>
				{% endif %}

				{% if projects is not empty %}
					{# Aggregate related tags #}
					{% set relatedTags = [] %}

					{% for item in projects %}
						{% for taxCategory,taxTags in item.taxonomy %}
							{# We don't want to filter by promotion status at this point #}
							{% for tag in taxTags if taxCategory != "promoted" %}
								{% if (tag not in knownTags) and (tag not in relatedTags) %}
									{% set relatedTags = relatedTags|merge([ tag ]) %}
									{% set attributedTags = attributedTags|merge({ (tag): {
									'found': true,
									'category': taxCategory,
									'title': themeConfig.tagMapping[tag].title|default(tag|capitalize)
									}}) %}
								{% endif %}
							{% endfor %}
						{% endfor %}

						{# <div>{{ item.title }} related tags: {{ relatedTags|json_encode }}</div> #}
					{% endfor %}

					{#
					 Filter out relatedTags that are present on every listed project
					 and thus would NOT narrow the selection
					 #}
					{% set narrowingTags = [] %}

					{% for tag in relatedTags|sort %}
						{% set attributedTag = attributedTags[tag] %}

						{% if taxMap[attributedTags[tag].category] is empty %}
							{% set narrowedTaxMap = taxMap|merge({(attributedTag.category): [tag] }) %}
						{% else %}
							{% set narrowedTaxMap = taxMap|merge({(attributedTag.category): taxMap[(attributedTag.category)]|merge([tag]) }) %}
						{% endif %}

						{% if isAllTag %}
							{% set projectCount = taxonomy.findTaxonomy( {(attributedTag.category): [tag] } )|length %}
						{% else %}
							{% set projectCount = taxonomy.findTaxonomy( narrowedTaxMap )|length %}
						{% endif %}

						{# Would there be a narrowing or do ALL project match the related tag? #}
						{% if projectCount < projects|length %}
							{% set narrowingTags = narrowingTags|merge([{
								'tag': tag,
								'title': attributedTag.title,
								'category': attributedTag.category,
								'projectCount': projectCount
							}]) %}
						{% endif %}
					{% endfor %}

					{% if narrowingTags is not empty %}
						<dt class="tags" title="Showing all tags also contained in the current selection">Narrow</dt>
						<dd class="tags" id="relatedTags">
							{% for tag in narrowingTags %}
								<a href="{{ page.url ~ "/:" ~ (isAllTag ? "" : (tagParam ~ "+")) ~ tag.tag }}" class="tag" data-tag="{{ tag.tag }}">
									+ {{ tag.title }}

									{% if taxMap[tag.category] is empty %}
										{% set narrowedTaxMap = taxMap|merge({(tag.category): [tag.tag] }) %}
									{% else %}
										{% set narrowedTaxMap = taxMap|merge({(tag.category): taxMap[(tag.category)]|merge([tag.tag]) }) %}
									{% endif %}

									<small class="numberOfProjects">{{ tag.projectCount }}</small>
								</a>
							{% endfor %}
						</dd>
					{% endif %}
				{% endif %}

				{% for taxCategory,taxTags in taxMap if taxCategory != "tag" %}
					{% set otherTagsInCategory = taxonomy.taxonomy[taxCategory]|keys %}
					{% if (otherTagsInCategory|length > 1) %}
						{% set tagList = "" %}
						{% for tag in taxTags %}
							{% if not (tag == taxTags|first) %}
								{% if (tag == taxTags|last) %}
									{% set tagList = tagList ~ " and " %}
								{% else %}
									{% set tagList = tagList ~ ", " %}
								{% endif %}
							{% endif %}
							{% set tagList = tagList ~ "'" ~ attributedTags[tag].title ~ "'" %}
						{% endfor %}

						{% set tagCategoryMapping = themeConfig.tagCategoryMapping[taxCategory] %}
						<dt class="tags"
						    title="As {{ tagList }} {{ taxTags|length == 1 ? "is a " ~ tagCategoryMapping.inline : "are " ~ tagCategoryMapping.inlinePlural }}, here are other {{ tagCategoryMapping.inlinePlural }} you might find interesting.">
							Other <em>{{ tagCategoryMapping.inlinePlural }}</em></dt>
						<dd class="tags">
							{% for tag in otherTagsInCategory|sort
							if tag not in taxTags %}

								<a href="{{ page.url ~ "/:" ~ tag }}" class="tag">
									{{ themeConfig.tagMapping[tag].title|default(tag|capitalize) }}
									<small class="numberOfProjects">{{ taxonomy.findTaxonomy( {(taxCategory): tag} )|length }}</small>
								</a>
							{% endfor %}
						</dd>


					{% endif %}
				{% endfor %}
			</dl>
		</div>
	</section>
	<section class="content">
		{% if projects is empty %}
			<div class="note">
				<p>Sorry, but there are <strong>no projects</strong> matching your selection.</p>
				<p>Try to expand the selection!</p>
			</div>
		{% else %}
			<div class="grid">
				<div class="grid-sizer">
					<div class="aspect-ratio"></div>
				</div>
				{% for project in projects %}
					{% set thumbnailType = project.header.thumbnail.extension|default("webm") %}
					{% set itemMedia = project.media[project.slug ~ "." ~ thumbnailType] %}
					{% if not project.header.thumbnail.start is empty %}
						{% set mediaFragment = "#t=" ~ project.header.thumbnail.start %}
					{% endif %}
					{% if project.taxonomy["promoted"] is empty %}
						{% set promotedClass = "" %}
					{% else %}
						{% set promotedClass = " promoted " ~ project.taxonomy["promoted"]|first %}
					{% endif %}

					{% set projectTags = [] %}
					{% for tagCategory,tags in project.taxonomy %}
						{% set projectTags = projectTags|merge(tags) %}
					{% endfor %}
					<div class="grid-item{{ promotedClass }}"{#{{ project.header.thumbnail.format }}"#}
					     data-tags="{{ projectTags|join(' ') }}">
						<a href="{{ project.url }}" class="projectLink aspect-ratio">
							<h3 class="projectTitle"><span class="centered">{{ project.title }}</span></h3>
							<div class="mediaContainer {{ project.header.thumbnail.class }}">
								{% if thumbnailType == "webm" %}
									<video preload="auto" muted="muted"
									       loop="loop">
										<source src="{{ itemMedia.url }}{{ mediaFragment }}" type="video/webm">
									</video>
								{% else %}
									{{ itemMedia }}
								{% endif %}
							</div>
						</a>
					</div>
				{% endfor %}
			</div>
		{% endif %}
	</section>
{% endblock %}
